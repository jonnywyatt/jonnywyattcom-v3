{"version":3,"sources":["../../../src/common/actions/history.js"],"names":["historyActions","listenForRouteChanges","dispatch","getState","state","history","replaceState","matchedRoute","document","location","href","Adapter","bind","window","data","path","documentElement","classList","add","then","remove","afterRouteChange","startRouteChange","target","url","currentTarget","pathname","err","error","preventDefault","pushState","type","stateKey"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB;AACrBC,yBAAuB,iCAAM;AAC3B,WAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7B,UAAMC,QAAQD,UAAd;AACA,UAAME,UAAUD,MAAMC,OAAtB;AACA;;AAEAA,cAAQC,YAAR,CAAqBF,MAAMG,YAA3B,EAAyC,IAAzC,EAA+CC,SAASC,QAAT,CAAkBC,IAAjE;AACAL,cAAQM,OAAR,CAAgBC,IAAhB,CAAqBC,MAArB,EAA6B,aAA7B,EAA4C,YAAM;AAChD,YAAMN,eAAeF,QAAQF,QAAR,GAAmBW,IAAxC;AACA,YAAIV,MAAMG,YAAN,CAAmBQ,IAAnB,KAA4BR,aAAaQ,IAA7C,EAAmD;AACjDF,iBAAOL,QAAP,CAAgBQ,eAAhB,CAAgCC,SAAhC,CAA0CC,GAA1C,CAA8C,SAA9C;AACA,wCAAehB,QAAf,EAAyBK,YAAzB,EAAuCH,KAAvC,EACGe,IADH,CACQ,YAAM;AACVN,mBAAOL,QAAP,CAAgBQ,eAAhB,CAAgCC,SAAhC,CAA0CG,MAA1C,CAAiD,SAAjD;AACA;AACA;AACA;AACD,WANH;AAOD;AACDlB,iBAASF,eAAeqB,gBAAf,CAAgCd,YAAhC,CAAT;AACD,OAbD;AAcD,KApBD;AAqBD,GAvBoB;;AAyBrBe,oBAAkB,0BAACC,MAAD,EAAY;AAC5B,WAAO,UAACrB,QAAD,EAAWC,QAAX,EAAwB;AAC7B,UAAME,UAAUF,WAAWE,OAA3B;AACA,UAAMmB,MAAMD,OAAOE,aAAP,CAAqBC,QAAjC;AACA,gCAAWF,GAAX,EAAgB,UAACG,GAAD,EAAMpB,YAAN,EAAuB;AACrC,YAAIoB,GAAJ,EAAS;AACP,2BAAOC,KAAP,CAAa,wBAAwBJ,GAArC;AACA;AACD;AACDD,eAAOM,cAAP;AACAxB,gBAAQyB,SAAR,CAAkBvB,YAAlB,EAAgC,IAAhC,EAAsCiB,GAAtC;AACD,OAPD;AAQD,KAXD;AAYD,GAtCoB;;AAwCrBH,oBAAkB,0BAACd,YAAD,EAAkB;AAClC,WAAO;AACLwB,YAAM,oBADD;AAELC,gBAAU,cAFL;AAGLlB,YAAMP;AAHD,KAAP;AAKD;AA9CoB,CAAvB;;kBAiDeP,c","file":"history.js","sourcesContent":["import matchRoute from '../utils/match-route';\nimport fetchDataNeeds from '../utils/fetch-data-needs';\nimport logger from '../utils/logger';\n\nconst historyActions = {\n  listenForRouteChanges: () => {\n    return (dispatch, getState) => {\n      const state = getState();\n      const history = state.history;\n      /* We need to populate the history state with data for the current page.\n       So if the user navigates away then clicks the back button, its state can be restored */\n      history.replaceState(state.matchedRoute, null, document.location.href);\n      history.Adapter.bind(window, 'statechange', () => {\n        const matchedRoute = history.getState().data;\n        if (state.matchedRoute.path !== matchedRoute.path) {\n          window.document.documentElement.classList.add('loading');\n          fetchDataNeeds(dispatch, matchedRoute, state)\n            .then(() => {\n              window.document.documentElement.classList.remove('loading');\n              // if (typeof window !== 'undefined' && !matchedRoute.preventAnalyticsEvents) {\n              //   dispatch(actions.analyticsPageView(matchedRoute));\n              // }\n            });\n        }\n        dispatch(historyActions.afterRouteChange(matchedRoute));\n      });\n    };\n  },\n\n  startRouteChange: (target) => {\n    return (dispatch, getState) => {\n      const history = getState().history;\n      const url = target.currentTarget.pathname;\n      matchRoute(url, (err, matchedRoute) => {\n        if (err) {\n          logger.error('Route not matched: ' + url);\n          return;\n        }\n        target.preventDefault();\n        history.pushState(matchedRoute, null, url);\n      });\n    };\n  },\n\n  afterRouteChange: (matchedRoute) => {\n    return {\n      type: 'AFTER_ROUTE_CHANGE',\n      stateKey: 'matchedRoute',\n      data: matchedRoute\n    };\n  }\n};\n\nexport default historyActions;\n"]}