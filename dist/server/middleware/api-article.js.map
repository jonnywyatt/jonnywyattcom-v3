{"version":3,"sources":["../../../src/server/middleware/api-article.js"],"names":["uristring","process","env","MONGOLAB_URI","MONGOHQ_URL","connect","err","res","error","info"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA;AACA;AACA,IAAMA,YACJC,QAAQC,GAAR,CAAYC,YAAZ,IACAF,QAAQC,GAAR,CAAYE,WADZ,IAEA,mCAHF;;AAKA;AACA;AACA;;AAEA;AACA;AACA,mBAASC,OAAT,CAAiBL,SAAjB,EAA4B,UAACM,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAID,GAAJ,EAAS;AACP,qBAAOE,KAAP,CAAa,0BAA0BR,SAA1B,GAAsC,IAAtC,GAA6CM,GAA1D;AACD,GAFD,MAEO;AACL,qBAAOG,IAAP,CAAY,6BAA6BT,SAAzC;AACA,qBAAOS,IAAP,CAAYF,GAAZ;AACD;AACF,CAPD","file":"api-article.js","sourcesContent":["import mongoose from 'mongoose';\nimport logger from '../../common/utils/logger';\n\n// Here we find an appropriate database to connect to, defaulting to\n// localhost if we don't find one.\nconst uristring =\n  process.env.MONGOLAB_URI ||\n  process.env.MONGOHQ_URL ||\n  'mongodb://localhost/HelloMongoose';\n\n// The http server will listen to an appropriate port, or default to\n// port 5000.\n// const theport = process.env.PORT || 5000;\n\n// Makes connection asynchronously.  Mongoose will queue up database\n// operations and release them when the connection is complete.\nmongoose.connect(uristring, (err, res) => {\n  if (err) {\n    logger.error('ERROR connecting to: ' + uristring + '. ' + err);\n  } else {\n    logger.info('Succeeded connected to: ' + uristring);\n    logger.info(res);\n  }\n});\n"]}